

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Tue Mar 19 14:09:46 2024

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    13                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    15   000000                     
    16                           ; Generated 17/10/2023 GMT
    17                           ; 
    18                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    19                           ; All rights reserved.
    20                           ; 
    21                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    22                           ; 
    23                           ; Redistribution and use in source and binary forms, with or without modification, are
    24                           ; permitted provided that the following conditions are met:
    25                           ; 
    26                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    27                           ;        conditions and the following disclaimer.
    28                           ; 
    29                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    30                           ;        of conditions and the following disclaimer in the documentation and/or other
    31                           ;        materials provided with the distribution. Publication is not required when
    32                           ;        this file is used in an embedded application.
    33                           ; 
    34                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    35                           ;        software without specific prior written permission.
    36                           ; 
    37                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    38                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    39                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    40                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    41                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    42                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    43                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    44                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    45                           ; 
    46                           ; 
    47                           ; Code-generator required, PIC18F4550 Definitions
    48                           ; 
    49                           ; SFR Addresses
    50   000000                     
    51                           	psect	idataCOMRAM
    52   000930                     __pidataCOMRAM:
    53                           	callstack 0
    54                           
    55                           ;initializer for main@F3223
    56   000930  10                 	db	16
    57   000931  18                 	db	24
    58   000932  1C                 	db	28
    59   000933  FE                 	db	254
    60   000934  FE                 	db	254
    61   000935  1C                 	db	28
    62   000936  18                 	db	24
    63   000937  10                 	db	16
    64                           
    65                           ;initializer for _acumulador
    66   000938  0007               	dw	7
    67                           
    68                           	psect	smallconst
    69   000800                     __psmallconst:
    70                           	callstack 0
    71   000800  00                 	db	0
    72   000801                     main@F3225:
    73                           	callstack 0
    74   000801  01                 	db	1
    75   000802  E3                 	db	227
    76   000803  F7                 	db	247
    77   000804  E3                 	db	227
    78   000805  D5                 	db	213
    79   000806  F7                 	db	247
    80   000807  EB                 	db	235
    81   000808  EB                 	db	235
    82   000809                     __end_ofmain@F3225:
    83                           	callstack 0
    84   000000                     _LATC	set	3979
    85   000000                     _LATCbits	set	3979
    86   000000                     _LATD	set	3980
    87   000000                     _TRISC	set	3988
    88   000000                     _TRISD	set	3989
    89   000000                     _ADCON1bits	set	4033
    90   000809  00                 	db	0	; dummy byte at the end
    91   000000                     
    92                           ; #config settings
    93                           
    94                           	psect	cinit
    95   000902                     __pcinit:
    96                           	callstack 0
    97   000902                     start_initialization:
    98                           	callstack 0
    99   000902                     __initialization:
   100                           	callstack 0
   101                           
   102                           ; Initialize objects allocated to COMRAM (10 bytes)
   103                           ; load TBLPTR registers with __pidataCOMRAM
   104   000902  0E30               	movlw	low __pidataCOMRAM
   105   000904  6EF6               	movwf	tblptrl,c
   106   000906  0E09               	movlw	high __pidataCOMRAM
   107   000908  6EF7               	movwf	tblptrh,c
   108   00090A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   109   00090C  6EF8               	movwf	tblptru,c
   110   00090E  EE00  F017         	lfsr	0,__pdataCOMRAM
   111   000912  EE10 F00A          	lfsr	1,10
   112   000916                     copy_data0:
   113   000916  0009               	tblrd		*+
   114   000918  CFF5 FFEE          	movff	tablat,postinc0
   115   00091C  50E5               	movf	postdec1,w,c
   116   00091E  50E1               	movf	fsr1l,w,c
   117   000920  E1FA               	bnz	copy_data0
   118   000922                     end_of_initialization:
   119                           	callstack 0
   120   000922                     __end_of__initialization:
   121                           	callstack 0
   122   000922  0E00               	movlw	low (__Lsmallconst shr (0+16))
   123   000924  6EF8               	movwf	tblptru,c
   124   000926  0E08               	movlw	high __Lsmallconst
   125   000928  6EF7               	movwf	tblptrh,c
   126   00092A  0100               	movlb	0
   127   00092C  EF05  F004         	goto	_main	;jump to C main() function
   128                           
   129                           	psect	dataCOMRAM
   130   000017                     __pdataCOMRAM:
   131                           	callstack 0
   132   000017                     main@F3223:
   133                           	callstack 0
   134   000017                     	ds	8
   135   00001F                     _acumulador:
   136                           	callstack 0
   137   00001F                     	ds	2
   138                           
   139                           	psect	cstackCOMRAM
   140   000001                     __pcstackCOMRAM:
   141                           	callstack 0
   142   000001                     Send_Byte_Data@b_m1:
   143                           	callstack 0
   144                           
   145                           ; 1 bytes @ 0x0
   146   000001                     	ds	1
   147   000002                     Send_Byte_Data@i:
   148                           	callstack 0
   149                           
   150                           ; 1 bytes @ 0x1
   151   000002                     	ds	1
   152   000003                     ??_main:
   153                           
   154                           ; 1 bytes @ 0x2
   155   000003                     	ds	1
   156   000004                     main@peaton_stop:
   157                           	callstack 0
   158                           
   159                           ; 8 bytes @ 0x3
   160   000004                     	ds	8
   161   00000C                     main@bicubic:
   162                           	callstack 0
   163                           
   164                           ; 8 bytes @ 0xB
   165   00000C                     	ds	8
   166   000014                     main@CONTADOR:
   167                           	callstack 0
   168                           
   169                           ; 2 bytes @ 0x13
   170   000014                     	ds	2
   171   000016                     main@contador_binario:
   172                           	callstack 0
   173                           
   174                           ; 1 bytes @ 0x15
   175   000016                     	ds	1
   176                           
   177 ;;
   178 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   179 ;;
   180 ;; *************** function _main *****************
   181 ;; Defined at:
   182 ;;		line 104 in file "pruebilla.c"
   183 ;; Parameters:    Size  Location     Type
   184 ;;		None
   185 ;; Auto vars:     Size  Location     Type
   186 ;;  bicubic         8   11[COMRAM] unsigned char [8]
   187 ;;  peaton_stop     8    3[COMRAM] const unsigned char [8]
   188 ;;  CONTADOR        2   19[COMRAM] int 
   189 ;;  contador_bin    1   21[COMRAM] unsigned char 
   190 ;; Return value:  Size  Location     Type
   191 ;;                  1    wreg      void 
   192 ;; Registers used:
   193 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   194 ;; Tracked objects:
   195 ;;		On entry : 0/0
   196 ;;		On exit  : 0/0
   197 ;;		Unchanged: 0/0
   198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   199 ;;      Params:         0       0       0       0       0       0       0       0       0
   200 ;;      Locals:        19       0       0       0       0       0       0       0       0
   201 ;;      Temps:          1       0       0       0       0       0       0       0       0
   202 ;;      Totals:        20       0       0       0       0       0       0       0       0
   203 ;;Total ram usage:       20 bytes
   204 ;; Hardware stack levels required when called: 1
   205 ;; This function calls:
   206 ;;		_Send_Byte_Data
   207 ;; This function is called by:
   208 ;;		Startup code after reset
   209 ;; This function uses a non-reentrant model
   210 ;;
   211                           
   212                           	psect	text0
   213   00080A                     __ptext0:
   214                           	callstack 0
   215   00080A                     _main:
   216                           	callstack 30
   217   00080A                     
   218                           ;pruebilla.c: 105:     unsigned char bicubic[8]={0x10,0x18,0x1c,0xfe,0xfe,0x1c,0x18,0x10
      +                          };
   219   00080A  EE20  F017         	lfsr	2,main@F3223
   220   00080E  EE10  F00C         	lfsr	1,main@bicubic
   221   000812  0E07               	movlw	7
   222   000814                     u61:
   223   000814  CFDB FFE3          	movff	plusw2,plusw1
   224   000818  06E8               	decf	wreg,f,c
   225   00081A  E2FC               	bc	u61
   226   00081C                     
   227                           ;pruebilla.c: 109:     const uint8_t peaton_stop[8] = {0x01, 0xe3, 0xf7, 0xe3, 0xd5, 0xf
      +                          7, 0xeb, 0xeb};
   228   00081C  0E01               	movlw	low main@F3225
   229   00081E  6EF6               	movwf	tblptrl,c
   230   000820                     	if	0	;There is only one active tblptr byte
   231   000820                     	endif
   232   000820                     	if	0	;There are less than 3 active tblptr bytes
   233   000820                     	endif
   234   000820  EE20  F004         	lfsr	2,main@peaton_stop
   235   000824  0E07               	movlw	7
   236   000826                     u70:
   237   000826  0009               	tblrd		*+
   238   000828  CFF5 FFDE          	movff	tablat,postinc2
   239   00082C  06E8               	decf	wreg,f,c
   240   00082E  E2FB               	bc	u70
   241   000830                     
   242                           ;pruebilla.c: 110:     uint8_t contador_binario=0x80;
   243   000830  0E80               	movlw	128
   244   000832  6E16               	movwf	main@contador_binario^0,c
   245   000834                     
   246                           ;pruebilla.c: 111:     int CONTADOR =0;
   247   000834  0E00               	movlw	0
   248   000836  6E15               	movwf	(main@CONTADOR+1)^0,c
   249   000838  0E00               	movlw	0
   250   00083A  6E14               	movwf	main@CONTADOR^0,c
   251   00083C                     
   252                           ;pruebilla.c: 112:     ADCON1bits.PCFG=0x0f;
   253   00083C  0E0F               	movlw	15
   254   00083E  12C1               	iorwf	193,f,c	;volatile
   255   000840                     
   256                           ;pruebilla.c: 113:     TRISD = 0x00;
   257   000840  0E00               	movlw	0
   258   000842  6E95               	movwf	149,c	;volatile
   259   000844                     
   260                           ;pruebilla.c: 114:     TRISC = 0x00;
   261   000844  0E00               	movlw	0
   262   000846  6E94               	movwf	148,c	;volatile
   263   000848                     
   264                           ;pruebilla.c: 115:     LATD = 0x00;
   265   000848  0E00               	movlw	0
   266   00084A  6E8C               	movwf	140,c	;volatile
   267   00084C                     
   268                           ;pruebilla.c: 116:     LATC = 0x00;
   269   00084C  0E00               	movlw	0
   270   00084E  6E8B               	movwf	139,c	;volatile
   271   000850                     
   272                           ;pruebilla.c: 117:     LATCbits.LC6=1;
   273   000850  8C8B               	bsf	139,6,c	;volatile
   274   000852                     l789:
   275                           
   276                           ;pruebilla.c: 120:     {;pruebilla.c: 121:         _delay((unsigned long)((1)*(48000000/
      +                          4000.0)));
   277   000852  0E10               	movlw	16
   278   000854  6E03               	movwf	??_main^0,c
   279   000856  0E94               	movlw	148
   280   000858                     u107:
   281   000858  2EE8               	decfsz	wreg,f,c
   282   00085A  D7FE               	bra	u107
   283   00085C  2E03               	decfsz	??_main^0,f,c
   284   00085E  D7FC               	bra	u107
   285   000860  D000               	nop2	
   286   000862                     
   287                           ;pruebilla.c: 124:         Send_Byte_Data(~contador_binario);
   288   000862  5016               	movf	main@contador_binario^0,w,c
   289   000864  0AFF               	xorlw	255
   290   000866  EC60  F004         	call	_Send_Byte_Data
   291   00086A                     
   292                           ;pruebilla.c: 125:         contador_binario=contador_binario>>1;
   293   00086A  90D8               	bcf	status,0,c
   294   00086C  3016               	rrcf	main@contador_binario^0,w,c
   295   00086E  6E16               	movwf	main@contador_binario^0,c
   296   000870                     
   297                           ;pruebilla.c: 126:         if(contador_binario==0x00){
   298   000870  5016               	movf	main@contador_binario^0,w,c
   299   000872  A4D8               	btfss	status,2,c
   300   000874  EF3E  F004         	goto	u81
   301   000878  EF40  F004         	goto	u80
   302   00087C                     u81:
   303   00087C  EF42  F004         	goto	l799
   304   000880                     u80:
   305   000880                     
   306                           ;pruebilla.c: 127:             contador_binario=0x80;
   307   000880  0E80               	movlw	128
   308   000882  6E16               	movwf	main@contador_binario^0,c
   309   000884                     l799:
   310                           
   311                           ;pruebilla.c: 129:         LATD=bicubic[CONTADOR];
   312   000884  5014               	movf	main@CONTADOR^0,w,c
   313   000886  0F0C               	addlw	low main@bicubic
   314   000888  6ED9               	movwf	fsr2l,c
   315   00088A  6ADA               	clrf	fsr2h,c
   316   00088C  50DF               	movf	indf2,w,c
   317   00088E  6E8C               	movwf	140,c	;volatile
   318   000890                     
   319                           ;pruebilla.c: 131:         CONTADOR++;
   320   000890  4A14               	infsnz	main@CONTADOR^0,f,c
   321   000892  2A15               	incf	(main@CONTADOR+1)^0,f,c
   322   000894                     
   323                           ;pruebilla.c: 132:         if(CONTADOR>7)
   324   000894  BE15               	btfsc	(main@CONTADOR+1)^0,7,c
   325   000896  EF56  F004         	goto	u91
   326   00089A  5015               	movf	(main@CONTADOR+1)^0,w,c
   327   00089C  E109               	bnz	u90
   328   00089E  0E08               	movlw	8
   329   0008A0  5C14               	subwf	main@CONTADOR^0,w,c
   330   0008A2  A0D8               	btfss	status,0,c
   331   0008A4  EF56  F004         	goto	u91
   332   0008A8  EF58  F004         	goto	u90
   333   0008AC                     u91:
   334   0008AC  EF29  F004         	goto	l789
   335   0008B0                     u90:
   336   0008B0                     
   337                           ;pruebilla.c: 133:         {;pruebilla.c: 134:             CONTADOR=0;
   338   0008B0  0E00               	movlw	0
   339   0008B2  6E15               	movwf	(main@CONTADOR+1)^0,c
   340   0008B4  0E00               	movlw	0
   341   0008B6  6E14               	movwf	main@CONTADOR^0,c
   342   0008B8  EF29  F004         	goto	l789
   343   0008BC  EF00  F000         	goto	start
   344   0008C0                     __end_of_main:
   345                           	callstack 0
   346                           
   347 ;; *************** function _Send_Byte_Data *****************
   348 ;; Defined at:
   349 ;;		line 92 in file "pruebilla.c"
   350 ;; Parameters:    Size  Location     Type
   351 ;;  b_m1            1    wreg     unsigned char 
   352 ;; Auto vars:     Size  Location     Type
   353 ;;  b_m1            1    0[COMRAM] unsigned char 
   354 ;;  i               1    1[COMRAM] unsigned char 
   355 ;; Return value:  Size  Location     Type
   356 ;;                  1    wreg      void 
   357 ;; Registers used:
   358 ;;		wreg, status,2, status,0
   359 ;; Tracked objects:
   360 ;;		On entry : 0/0
   361 ;;		On exit  : 0/0
   362 ;;		Unchanged: 0/0
   363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   364 ;;      Params:         0       0       0       0       0       0       0       0       0
   365 ;;      Locals:         2       0       0       0       0       0       0       0       0
   366 ;;      Temps:          0       0       0       0       0       0       0       0       0
   367 ;;      Totals:         2       0       0       0       0       0       0       0       0
   368 ;;Total ram usage:        2 bytes
   369 ;; Hardware stack levels used: 1
   370 ;; This function calls:
   371 ;;		Nothing
   372 ;; This function is called by:
   373 ;;		_main
   374 ;; This function uses a non-reentrant model
   375 ;;
   376                           
   377                           	psect	text1
   378   0008C0                     __ptext1:
   379                           	callstack 0
   380   0008C0                     _Send_Byte_Data:
   381                           	callstack 30
   382                           
   383                           ;incstack = 0
   384                           ;Send_Byte_Data@b_m1 stored from wreg
   385   0008C0  6E01               	movwf	Send_Byte_Data@b_m1^0,c
   386   0008C2                     
   387                           ;pruebilla.c: 92: void Send_Byte_Data(uint8_t b_m1);pruebilla.c: 93: {;pruebilla.c: 94: 
      +                              for(uint8_t i=0x80; i>0; i=i>>1)
   388   0008C2  0E80               	movlw	128
   389   0008C4  6E02               	movwf	Send_Byte_Data@i^0,c
   390   0008C6                     l739:
   391                           
   392                           ;pruebilla.c: 95:     {;pruebilla.c: 96:         (b_m1 & i) ? (LATCbits.LC2 = 1) : (LATC
      +                          bits.LC2 = 0);
   393   0008C6  5001               	movf	Send_Byte_Data@b_m1^0,w,c
   394   0008C8  1402               	andwf	Send_Byte_Data@i^0,w,c
   395   0008CA  0900               	iorlw	0
   396   0008CC  B4D8               	btfsc	status,2,c
   397   0008CE  EF6B  F004         	goto	u11
   398   0008D2  EF6D  F004         	goto	u10
   399   0008D6                     u11:
   400   0008D6  EF70  F004         	goto	l36
   401   0008DA                     u10:
   402   0008DA  848B               	bsf	139,2,c	;volatile
   403   0008DC  EF71  F004         	goto	l38
   404   0008E0                     l36:
   405   0008E0  948B               	bcf	139,2,c	;volatile
   406   0008E2                     l38:
   407                           
   408                           ;pruebilla.c: 97:         LATCbits.LC0 = 1;
   409   0008E2  808B               	bsf	139,0,c	;volatile
   410                           
   411                           ;pruebilla.c: 98:         LATCbits.LC0 = 0;
   412   0008E4  908B               	bcf	139,0,c	;volatile
   413   0008E6                     
   414                           ;pruebilla.c: 99:     }
   415   0008E6  90D8               	bcf	status,0,c
   416   0008E8  3002               	rrcf	Send_Byte_Data@i^0,w,c
   417   0008EA  6E02               	movwf	Send_Byte_Data@i^0,c
   418   0008EC  5002               	movf	Send_Byte_Data@i^0,w,c
   419   0008EE  A4D8               	btfss	status,2,c
   420   0008F0  EF7C  F004         	goto	u21
   421   0008F4  EF7E  F004         	goto	u20
   422   0008F8                     u21:
   423   0008F8  EF63  F004         	goto	l739
   424   0008FC                     u20:
   425   0008FC                     
   426                           ;pruebilla.c: 100:     LATCbits.LC1 = 1;
   427   0008FC  828B               	bsf	139,1,c	;volatile
   428                           
   429                           ;pruebilla.c: 101:     LATCbits.LC1 = 0;
   430   0008FE  928B               	bcf	139,1,c	;volatile
   431   000900  0012               	return		;funcret
   432   000902                     __end_of_Send_Byte_Data:
   433                           	callstack 0
   434                           
   435                           	psect	rparam
   436   000000                     
   437                           	psect	config
   438                           
   439                           ;Config register CONFIG1L @ 0x300000
   440                           ;	PLL Prescaler Selection bits
   441                           ;	PLLDIV = 2, Divide by 2 (8 MHz oscillator input)
   442                           ;	System Clock Postscaler Selection bits
   443                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
   444                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
   445                           ;	USBDIV = 2, USB clock source comes from the 96 MHz PLL divided by 2
   446   300000                     	org	3145728
   447   300000  21                 	db	33
   448                           
   449                           ;Config register CONFIG1H @ 0x300001
   450                           ;	Oscillator Selection bits
   451                           ;	FOSC = HSPLL_HS, HS oscillator, PLL enabled (HSPLL)
   452                           ;	Fail-Safe Clock Monitor Enable bit
   453                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
   454                           ;	Internal/External Oscillator Switchover bit
   455                           ;	IESO = OFF, Oscillator Switchover mode disabled
   456   300001                     	org	3145729
   457   300001  0E                 	db	14
   458                           
   459                           ;Config register CONFIG2L @ 0x300002
   460                           ;	Power-up Timer Enable bit
   461                           ;	PWRT = OFF, PWRT disabled
   462                           ;	Brown-out Reset Enable bits
   463                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
   464                           ;	Brown-out Reset Voltage bits
   465                           ;	BORV = 3, Minimum setting 2.05V
   466                           ;	USB Voltage Regulator Enable bit
   467                           ;	VREGEN = OFF, USB voltage regulator disabled
   468   300002                     	org	3145730
   469   300002  19                 	db	25
   470                           
   471                           ;Config register CONFIG2H @ 0x300003
   472                           ;	Watchdog Timer Enable bit
   473                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
   474                           ;	Watchdog Timer Postscale Select bits
   475                           ;	WDTPS = 32768, 1:32768
   476   300003                     	org	3145731
   477   300003  1E                 	db	30
   478                           
   479                           ; Padding undefined space
   480   300004                     	org	3145732
   481   300004  FF                 	db	255
   482                           
   483                           ;Config register CONFIG3H @ 0x300005
   484                           ;	CCP2 MUX bit
   485                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
   486                           ;	PORTB A/D Enable bit
   487                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
   488                           ;	Low-Power Timer 1 Oscillator Enable bit
   489                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
   490                           ;	MCLR Pin Enable bit
   491                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
   492   300005                     	org	3145733
   493   300005  81                 	db	129
   494                           
   495                           ;Config register CONFIG4L @ 0x300006
   496                           ;	Stack Full/Underflow Reset Enable bit
   497                           ;	STVREN = ON, Stack full/underflow will cause Reset
   498                           ;	Single-Supply ICSP Enable bit
   499                           ;	LVP = OFF, Single-Supply ICSP disabled
   500                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
   501                           ;	ICPRT = OFF, ICPORT disabled
   502                           ;	Extended Instruction Set Enable bit
   503                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
   504                           ;	Background Debugger Enable bit
   505                           ;	DEBUG = 0x1, unprogrammed default
   506   300006                     	org	3145734
   507   300006  81                 	db	129
   508                           
   509                           ; Padding undefined space
   510   300007                     	org	3145735
   511   300007  FF                 	db	255
   512                           
   513                           ;Config register CONFIG5L @ 0x300008
   514                           ;	Code Protection bit
   515                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
   516                           ;	Code Protection bit
   517                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
   518                           ;	Code Protection bit
   519                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
   520                           ;	Code Protection bit
   521                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
   522   300008                     	org	3145736
   523   300008  0F                 	db	15
   524                           
   525                           ;Config register CONFIG5H @ 0x300009
   526                           ;	Boot Block Code Protection bit
   527                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
   528                           ;	Data EEPROM Code Protection bit
   529                           ;	CPD = OFF, Data EEPROM is not code-protected
   530   300009                     	org	3145737
   531   300009  C0                 	db	192
   532                           
   533                           ;Config register CONFIG6L @ 0x30000A
   534                           ;	Write Protection bit
   535                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
   536                           ;	Write Protection bit
   537                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
   538                           ;	Write Protection bit
   539                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
   540                           ;	Write Protection bit
   541                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
   542   30000A                     	org	3145738
   543   30000A  0F                 	db	15
   544                           
   545                           ;Config register CONFIG6H @ 0x30000B
   546                           ;	Configuration Register Write Protection bit
   547                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
   548                           ;	Boot Block Write Protection bit
   549                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
   550                           ;	Data EEPROM Write Protection bit
   551                           ;	WRTD = OFF, Data EEPROM is not write-protected
   552   30000B                     	org	3145739
   553   30000B  E0                 	db	224
   554                           
   555                           ;Config register CONFIG7L @ 0x30000C
   556                           ;	Table Read Protection bit
   557                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
   558                           ;	Table Read Protection bit
   559                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
   560                           ;	Table Read Protection bit
   561                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
   562                           ;	Table Read Protection bit
   563                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
   564   30000C                     	org	3145740
   565   30000C  0F                 	db	15
   566                           
   567                           ;Config register CONFIG7H @ 0x30000D
   568                           ;	Boot Block Table Read Protection bit
   569                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
   570   30000D                     	org	3145741
   571   30000D  40                 	db	64
   572                           tosu	equ	0xFFF
   573                           tosh	equ	0xFFE
   574                           tosl	equ	0xFFD
   575                           stkptr	equ	0xFFC
   576                           pclatu	equ	0xFFB
   577                           pclath	equ	0xFFA
   578                           pcl	equ	0xFF9
   579                           tblptru	equ	0xFF8
   580                           tblptrh	equ	0xFF7
   581                           tblptrl	equ	0xFF6
   582                           tablat	equ	0xFF5
   583                           prodh	equ	0xFF4
   584                           prodl	equ	0xFF3
   585                           indf0	equ	0xFEF
   586                           postinc0	equ	0xFEE
   587                           postdec0	equ	0xFED
   588                           preinc0	equ	0xFEC
   589                           plusw0	equ	0xFEB
   590                           fsr0h	equ	0xFEA
   591                           fsr0l	equ	0xFE9
   592                           wreg	equ	0xFE8
   593                           indf1	equ	0xFE7
   594                           postinc1	equ	0xFE6
   595                           postdec1	equ	0xFE5
   596                           preinc1	equ	0xFE4
   597                           plusw1	equ	0xFE3
   598                           fsr1h	equ	0xFE2
   599                           fsr1l	equ	0xFE1
   600                           bsr	equ	0xFE0
   601                           indf2	equ	0xFDF
   602                           postinc2	equ	0xFDE
   603                           postdec2	equ	0xFDD
   604                           preinc2	equ	0xFDC
   605                           plusw2	equ	0xFDB
   606                           fsr2h	equ	0xFDA
   607                           fsr2l	equ	0xFD9
   608                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    8
    Data        10
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     22      32
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_Send_Byte_Data

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                20    20      0     165
                                              2 COMRAM    20    20      0
                     _Send_Byte_Data
 ---------------------------------------------------------------------------------
 (1) _Send_Byte_Data                                       2     2      0      75
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Send_Byte_Data

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      25        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     16      20       1       33.7%
BITBIGSFRhh         3E      0       0      20        0.0%
BITBIGSFRhlh        2B      0       0      21        0.0%
BITBIGSFRl          2B      0       0      23        0.0%
BITBIGSFRhll         7      0       0      22        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      20      24        0.0%
DATA                 0      0      20       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Tue Mar 19 14:09:46 2024

                     l34 08FC                       l36 08E0                       l38 08E2  
                     l39 0900                       u10 08DA                       u11 08D6  
                     u20 08FC                       u21 08F8                       u61 0814  
                     u70 0826                       u80 0880                       u81 087C  
                     u90 08B0                       u91 08AC                      l801 0890  
                    l803 0894                      l741 08DA                      l733 08C2  
                    l805 08B0                      l743 08E6                      l745 08EC  
                    l739 08C6                      l771 081C                      l781 0844  
                    l773 0830                      l791 0862                      l783 0848  
                    l775 0834                      l793 086A                      l785 084C  
                    l777 083C                      l769 080A                      l795 0870  
                    l787 0850                      l779 0840                      l797 0880  
                    l789 0852                      l799 0884                      u107 0858  
   main@contador_binario 0016                      wreg 0FE8              main@bicubic 000C  
                   _LATC 0F8B                     _LATD 0F8C                     _main 080A  
                   fsr2h 0FDA                     indf2 0FDF                     fsr1l 0FE1  
                   fsr2l 0FD9                     start 0000             ___param_bank 0000  
                  ?_main 0001                    _TRISC 0F94                    _TRISD 0F95  
                  tablat 0FF5                    plusw1 0FE3                    plusw2 0FDB  
                  status 0FD8          __initialization 0902             __end_of_main 08C0  
                 ??_main 0003            __activetblptr 0001         ??_Send_Byte_Data 0001  
                 isa$std 0001             __pdataCOMRAM 0017             __mediumconst 0000  
                 tblptrh 0FF7                   tblptrl 0FF6                   tblptru 0FF8  
        Send_Byte_Data@i 0002               __accesstop 0060  __end_of__initialization 0922  
          ___rparam_used 0001           __pcstackCOMRAM 0001               _acumulador 001F  
                __Hparam 0000                  __Lparam 0000             __psmallconst 0800  
                __pcinit 0902                  __ramtop 0800                  __ptext0 080A  
                __ptext1 08C0     end_of_initialization 0922        __end_ofmain@F3225 0809  
                postdec1 0FE5                  postinc0 0FEE                  postinc2 0FDE  
          __pidataCOMRAM 0930      start_initialization 0902              __smallconst 0800  
               _LATCbits 0F8B                main@F3223 0017                main@F3225 0801  
             _ADCON1bits 0FC1                copy_data0 0916          main@peaton_stop 0004  
         _Send_Byte_Data 08C0                 __Hrparam 0000                 __Lrparam 0000  
           __Lsmallconst 0800   __end_of_Send_Byte_Data 0902       Send_Byte_Data@b_m1 0001  
               isa$xinst 0000          ?_Send_Byte_Data 0001             main@CONTADOR 0014  
