

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Thu Mar 21 17:32:31 2024

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    13                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    15   000000                     
    16                           ; Generated 17/10/2023 GMT
    17                           ; 
    18                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    19                           ; All rights reserved.
    20                           ; 
    21                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    22                           ; 
    23                           ; Redistribution and use in source and binary forms, with or without modification, are
    24                           ; permitted provided that the following conditions are met:
    25                           ; 
    26                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    27                           ;        conditions and the following disclaimer.
    28                           ; 
    29                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    30                           ;        of conditions and the following disclaimer in the documentation and/or other
    31                           ;        materials provided with the distribution. Publication is not required when
    32                           ;        this file is used in an embedded application.
    33                           ; 
    34                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    35                           ;        software without specific prior written permission.
    36                           ; 
    37                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    38                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    39                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    40                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    41                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    42                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    43                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    44                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    45                           ; 
    46                           ; 
    47                           ; Code-generator required, PIC18F4550 Definitions
    48                           ; 
    49                           ; SFR Addresses
    50   000000                     
    51                           	psect	idataCOMRAM
    52   000932                     __pidataCOMRAM:
    53                           	callstack 0
    54                           
    55                           ;initializer for _acumulador
    56   000932  0007               	dw	7
    57                           
    58                           	psect	smallconst
    59   000800                     __psmallconst:
    60                           	callstack 0
    61   000800  00                 	db	0
    62   000801                     main@F3230:
    63                           	callstack 0
    64   000801  01                 	db	1
    65   000802  E3                 	db	227
    66   000803  F7                 	db	247
    67   000804  E3                 	db	227
    68   000805  D5                 	db	213
    69   000806  F7                 	db	247
    70   000807  EB                 	db	235
    71   000808  EB                 	db	235
    72   000809                     __end_ofmain@F3230:
    73                           	callstack 0
    74   000809                     main@F3228:
    75                           	callstack 0
    76   000809  10                 	db	16
    77   00080A  18                 	db	24
    78   00080B  1C                 	db	28
    79   00080C  FE                 	db	254
    80   00080D  FE                 	db	254
    81   00080E  1C                 	db	28
    82   00080F  18                 	db	24
    83   000810  10                 	db	16
    84   000811                     __end_ofmain@F3228:
    85                           	callstack 0
    86   000000                     _TRISC	set	3988
    87   000000                     _TRISD	set	3989
    88   000000                     _ADCON1bits	set	4033
    89   000000                     _TMR1L	set	4046
    90   000000                     _TMR1H	set	4047
    91   000000                     _T1CON	set	4045
    92   000000                     _LATC	set	3979
    93   000000                     _T1CONbits	set	4045
    94   000000                     _PORTBbits	set	3969
    95   000000                     _LATBbits	set	3978
    96   000000                     _TRISBbits	set	3987
    97   000000                     _LATD	set	3980
    98   000000                     _LATCbits	set	3979
    99   000811  00                 	db	0	; dummy byte at the end
   100   000000                     
   101                           ; #config settings
   102                           
   103                           	psect	cinit
   104   00090C                     __pcinit:
   105                           	callstack 0
   106   00090C                     start_initialization:
   107                           	callstack 0
   108   00090C                     __initialization:
   109                           	callstack 0
   110                           
   111                           ; Initialize objects allocated to COMRAM (2 bytes)
   112                           ; load TBLPTR registers with __pidataCOMRAM
   113   00090C  0E32               	movlw	low __pidataCOMRAM
   114   00090E  6EF6               	movwf	tblptrl,c
   115   000910  0E09               	movlw	high __pidataCOMRAM
   116   000912  6EF7               	movwf	tblptrh,c
   117   000914  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   118   000916  6EF8               	movwf	tblptru,c
   119   000918  0009               	tblrd		*+	;fetch initializer
   120   00091A  CFF5 F017          	movff	tablat,__pdataCOMRAM
   121   00091E  0009               	tblrd		*+	;fetch initializer
   122   000920  CFF5 F018          	movff	tablat,__pdataCOMRAM+1
   123   000924                     end_of_initialization:
   124                           	callstack 0
   125   000924                     __end_of__initialization:
   126                           	callstack 0
   127   000924  0E00               	movlw	low (__Lsmallconst shr (0+16))
   128   000926  6EF8               	movwf	tblptru,c
   129   000928  0E08               	movlw	high __Lsmallconst
   130   00092A  6EF7               	movwf	tblptrh,c
   131   00092C  0100               	movlb	0
   132   00092E  EF09  F004         	goto	_main	;jump to C main() function
   133                           
   134                           	psect	dataCOMRAM
   135   000017                     __pdataCOMRAM:
   136                           	callstack 0
   137   000017                     _acumulador:
   138                           	callstack 0
   139   000017                     	ds	2
   140                           
   141                           	psect	cstackCOMRAM
   142   000001                     __pcstackCOMRAM:
   143                           	callstack 0
   144   000001                     Send_Byte_Data@b_m1:
   145                           	callstack 0
   146                           
   147                           ; 1 bytes @ 0x0
   148   000001                     	ds	1
   149   000002                     Send_Byte_Data@i:
   150                           	callstack 0
   151                           
   152                           ; 1 bytes @ 0x1
   153   000002                     	ds	1
   154   000003                     ??_main:
   155                           
   156                           ; 1 bytes @ 0x2
   157   000003                     	ds	1
   158   000004                     main@peaton_stop:
   159                           	callstack 0
   160                           
   161                           ; 8 bytes @ 0x3
   162   000004                     	ds	8
   163   00000C                     main@bicubic:
   164                           	callstack 0
   165                           
   166                           ; 8 bytes @ 0xB
   167   00000C                     	ds	8
   168   000014                     main@CONTADOR:
   169                           	callstack 0
   170                           
   171                           ; 2 bytes @ 0x13
   172   000014                     	ds	2
   173   000016                     main@contador_binario:
   174                           	callstack 0
   175                           
   176                           ; 1 bytes @ 0x15
   177   000016                     	ds	1
   178                           
   179 ;;
   180 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   181 ;;
   182 ;; *************** function _main *****************
   183 ;; Defined at:
   184 ;;		line 137 in file "pruebilla.c"
   185 ;; Parameters:    Size  Location     Type
   186 ;;		None
   187 ;; Auto vars:     Size  Location     Type
   188 ;;  bicubic         8   11[COMRAM] const unsigned char [8]
   189 ;;  peaton_stop     8    3[COMRAM] const unsigned char [8]
   190 ;;  CONTADOR        2   19[COMRAM] int 
   191 ;;  contador_bin    1   21[COMRAM] unsigned char 
   192 ;; Return value:  Size  Location     Type
   193 ;;                  1    wreg      void 
   194 ;; Registers used:
   195 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   196 ;; Tracked objects:
   197 ;;		On entry : 0/0
   198 ;;		On exit  : 0/0
   199 ;;		Unchanged: 0/0
   200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   201 ;;      Params:         0       0       0       0       0       0       0       0       0
   202 ;;      Locals:        19       0       0       0       0       0       0       0       0
   203 ;;      Temps:          1       0       0       0       0       0       0       0       0
   204 ;;      Totals:        20       0       0       0       0       0       0       0       0
   205 ;;Total ram usage:       20 bytes
   206 ;; Hardware stack levels required when called: 1
   207 ;; This function calls:
   208 ;;		_Send_Byte_Data
   209 ;; This function is called by:
   210 ;;		Startup code after reset
   211 ;; This function uses a non-reentrant model
   212 ;;
   213                           
   214                           	psect	text0
   215   000812                     __ptext0:
   216                           	callstack 0
   217   000812                     _main:
   218                           	callstack 30
   219   000812                     
   220                           ;pruebilla.c: 139:     const uint8_t bicubic[8]={0x10,0x18,0x1c,0xfe,0xfe,0x1c,0x18,0x10
      +                          };
   221   000812  0E09               	movlw	low main@F3228
   222   000814  6EF6               	movwf	tblptrl,c
   223   000816                     	if	0	;There is only one active tblptr byte
   224   000816                     	endif
   225   000816                     	if	0	;There are less than 3 active tblptr bytes
   226   000816                     	endif
   227   000816  EE20  F00C         	lfsr	2,main@bicubic
   228   00081A  0E07               	movlw	7
   229   00081C                     u80:
   230   00081C  0009               	tblrd		*+
   231   00081E  CFF5 FFDE          	movff	tablat,postinc2
   232   000822  06E8               	decf	wreg,f,c
   233   000824  E2FB               	bc	u80
   234                           
   235                           ;pruebilla.c: 141:     const uint8_t peaton_stop[8] = {0x01, 0xe3, 0xf7, 0xe3, 0xd5, 0xf
      +                          7, 0xeb, 0xeb};
   236   000826  0E01               	movlw	low main@F3230
   237   000828  6EF6               	movwf	tblptrl,c
   238   00082A                     	if	0	;There is only one active tblptr byte
   239   00082A                     	endif
   240   00082A                     	if	0	;There are less than 3 active tblptr bytes
   241   00082A                     	endif
   242   00082A  EE20  F004         	lfsr	2,main@peaton_stop
   243   00082E  0E07               	movlw	7
   244   000830                     u90:
   245   000830  0009               	tblrd		*+
   246   000832  CFF5 FFDE          	movff	tablat,postinc2
   247   000836  06E8               	decf	wreg,f,c
   248   000838  E2FB               	bc	u90
   249   00083A                     
   250                           ;pruebilla.c: 142:     uint8_t contador_binario=0x80;
   251   00083A  0E80               	movlw	128
   252   00083C  6E16               	movwf	main@contador_binario^0,c
   253   00083E                     
   254                           ;pruebilla.c: 143:     int CONTADOR =0;
   255   00083E  0E00               	movlw	0
   256   000840  6E15               	movwf	(main@CONTADOR+1)^0,c
   257   000842  0E00               	movlw	0
   258   000844  6E14               	movwf	main@CONTADOR^0,c
   259   000846                     
   260                           ;pruebilla.c: 144:     ADCON1bits.PCFG=0x0f;
   261   000846  0E0F               	movlw	15
   262   000848  12C1               	iorwf	193,f,c	;volatile
   263   00084A                     
   264                           ;pruebilla.c: 145:     TRISD = 0x00;
   265   00084A  0E00               	movlw	0
   266   00084C  6E95               	movwf	149,c	;volatile
   267   00084E                     
   268                           ;pruebilla.c: 146:     TRISC = 0x00;
   269   00084E  0E00               	movlw	0
   270   000850  6E94               	movwf	148,c	;volatile
   271   000852                     
   272                           ;pruebilla.c: 147:     LATD = 0x00;
   273   000852  0E00               	movlw	0
   274   000854  6E8C               	movwf	140,c	;volatile
   275   000856                     
   276                           ;pruebilla.c: 148:     LATC = 0x00;
   277   000856  0E00               	movlw	0
   278   000858  6E8B               	movwf	139,c	;volatile
   279   00085A                     
   280                           ;pruebilla.c: 149:     LATCbits.LC6=1;
   281   00085A  8C8B               	bsf	139,6,c	;volatile
   282   00085C                     l831:
   283                           
   284                           ;pruebilla.c: 152:     {;pruebilla.c: 153:         _delay((unsigned long)((1)*(48000000/
      +                          4000.0)));
   285   00085C  0E10               	movlw	16
   286   00085E  6E03               	movwf	??_main^0,c
   287   000860  0E94               	movlw	148
   288   000862                     u127:
   289   000862  2EE8               	decfsz	wreg,f,c
   290   000864  D7FE               	bra	u127
   291   000866  2E03               	decfsz	??_main^0,f,c
   292   000868  D7FC               	bra	u127
   293   00086A  D000               	nop2	
   294   00086C                     
   295                           ;pruebilla.c: 157:         Send_Byte_Data(~contador_binario);
   296   00086C  5016               	movf	main@contador_binario^0,w,c
   297   00086E  0AFF               	xorlw	255
   298   000870  EC65  F004         	call	_Send_Byte_Data
   299   000874                     
   300                           ;pruebilla.c: 158:         contador_binario=contador_binario>>1;
   301   000874  90D8               	bcf	status,0,c
   302   000876  3016               	rrcf	main@contador_binario^0,w,c
   303   000878  6E16               	movwf	main@contador_binario^0,c
   304   00087A                     
   305                           ;pruebilla.c: 159:         if(contador_binario==0x00){
   306   00087A  5016               	movf	main@contador_binario^0,w,c
   307   00087C  A4D8               	btfss	status,2,c
   308   00087E  EF43  F004         	goto	u101
   309   000882  EF45  F004         	goto	u100
   310   000886                     u101:
   311   000886  EF47  F004         	goto	l841
   312   00088A                     u100:
   313   00088A                     
   314                           ;pruebilla.c: 160:             contador_binario=0x80;
   315   00088A  0E80               	movlw	128
   316   00088C  6E16               	movwf	main@contador_binario^0,c
   317   00088E                     l841:
   318                           
   319                           ;pruebilla.c: 162:         LATD=bicubic[CONTADOR];
   320   00088E  5014               	movf	main@CONTADOR^0,w,c
   321   000890  0F0C               	addlw	low main@bicubic
   322   000892  6ED9               	movwf	fsr2l,c
   323   000894  6ADA               	clrf	fsr2h,c
   324   000896  50DF               	movf	indf2,w,c
   325   000898  6E8C               	movwf	140,c	;volatile
   326   00089A                     
   327                           ;pruebilla.c: 164:         CONTADOR++;
   328   00089A  4A14               	infsnz	main@CONTADOR^0,f,c
   329   00089C  2A15               	incf	(main@CONTADOR+1)^0,f,c
   330   00089E                     
   331                           ;pruebilla.c: 165:         if(CONTADOR>7)
   332   00089E  BE15               	btfsc	(main@CONTADOR+1)^0,7,c
   333   0008A0  EF5B  F004         	goto	u111
   334   0008A4  5015               	movf	(main@CONTADOR+1)^0,w,c
   335   0008A6  E109               	bnz	u110
   336   0008A8  0E08               	movlw	8
   337   0008AA  5C14               	subwf	main@CONTADOR^0,w,c
   338   0008AC  A0D8               	btfss	status,0,c
   339   0008AE  EF5B  F004         	goto	u111
   340   0008B2  EF5D  F004         	goto	u110
   341   0008B6                     u111:
   342   0008B6  EF2E  F004         	goto	l831
   343   0008BA                     u110:
   344   0008BA                     
   345                           ;pruebilla.c: 166:         {;pruebilla.c: 167:             CONTADOR=0;
   346   0008BA  0E00               	movlw	0
   347   0008BC  6E15               	movwf	(main@CONTADOR+1)^0,c
   348   0008BE  0E00               	movlw	0
   349   0008C0  6E14               	movwf	main@CONTADOR^0,c
   350   0008C2  EF2E  F004         	goto	l831
   351   0008C6  EF00  F000         	goto	start
   352   0008CA                     __end_of_main:
   353                           	callstack 0
   354                           
   355 ;; *************** function _Send_Byte_Data *****************
   356 ;; Defined at:
   357 ;;		line 125 in file "pruebilla.c"
   358 ;; Parameters:    Size  Location     Type
   359 ;;  b_m1            1    wreg     unsigned char 
   360 ;; Auto vars:     Size  Location     Type
   361 ;;  b_m1            1    0[COMRAM] unsigned char 
   362 ;;  i               1    1[COMRAM] unsigned char 
   363 ;; Return value:  Size  Location     Type
   364 ;;                  1    wreg      void 
   365 ;; Registers used:
   366 ;;		wreg, status,2, status,0
   367 ;; Tracked objects:
   368 ;;		On entry : 0/0
   369 ;;		On exit  : 0/0
   370 ;;		Unchanged: 0/0
   371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   372 ;;      Params:         0       0       0       0       0       0       0       0       0
   373 ;;      Locals:         2       0       0       0       0       0       0       0       0
   374 ;;      Temps:          0       0       0       0       0       0       0       0       0
   375 ;;      Totals:         2       0       0       0       0       0       0       0       0
   376 ;;Total ram usage:        2 bytes
   377 ;; Hardware stack levels used: 1
   378 ;; This function calls:
   379 ;;		Nothing
   380 ;; This function is called by:
   381 ;;		_main
   382 ;; This function uses a non-reentrant model
   383 ;;
   384                           
   385                           	psect	text1
   386   0008CA                     __ptext1:
   387                           	callstack 0
   388   0008CA                     _Send_Byte_Data:
   389                           	callstack 30
   390                           
   391                           ;incstack = 0
   392                           ;Send_Byte_Data@b_m1 stored from wreg
   393   0008CA  6E01               	movwf	Send_Byte_Data@b_m1^0,c
   394   0008CC                     
   395                           ;pruebilla.c: 125: void Send_Byte_Data(uint8_t b_m1);pruebilla.c: 126: {;pruebilla.c: 12
      +                          7:     for(uint8_t i=0x80; i>0; i=i>>1)
   396   0008CC  0E80               	movlw	128
   397   0008CE  6E02               	movwf	Send_Byte_Data@i^0,c
   398   0008D0                     l765:
   399                           
   400                           ;pruebilla.c: 128:     {;pruebilla.c: 129:         (b_m1 & i) ? (LATCbits.LC2 = 1) : (LA
      +                          TCbits.LC2 = 0);
   401   0008D0  5001               	movf	Send_Byte_Data@b_m1^0,w,c
   402   0008D2  1402               	andwf	Send_Byte_Data@i^0,w,c
   403   0008D4  0900               	iorlw	0
   404   0008D6  B4D8               	btfsc	status,2,c
   405   0008D8  EF70  F004         	goto	u11
   406   0008DC  EF72  F004         	goto	u10
   407   0008E0                     u11:
   408   0008E0  EF75  F004         	goto	l62
   409   0008E4                     u10:
   410   0008E4  848B               	bsf	139,2,c	;volatile
   411   0008E6  EF76  F004         	goto	l64
   412   0008EA                     l62:
   413   0008EA  948B               	bcf	139,2,c	;volatile
   414   0008EC                     l64:
   415                           
   416                           ;pruebilla.c: 130:         LATCbits.LC0 = 1;
   417   0008EC  808B               	bsf	139,0,c	;volatile
   418                           
   419                           ;pruebilla.c: 131:         LATCbits.LC0 = 0;
   420   0008EE  908B               	bcf	139,0,c	;volatile
   421   0008F0                     
   422                           ;pruebilla.c: 132:     }
   423   0008F0  90D8               	bcf	status,0,c
   424   0008F2  3002               	rrcf	Send_Byte_Data@i^0,w,c
   425   0008F4  6E02               	movwf	Send_Byte_Data@i^0,c
   426   0008F6  5002               	movf	Send_Byte_Data@i^0,w,c
   427   0008F8  A4D8               	btfss	status,2,c
   428   0008FA  EF81  F004         	goto	u21
   429   0008FE  EF83  F004         	goto	u20
   430   000902                     u21:
   431   000902  EF68  F004         	goto	l765
   432   000906                     u20:
   433   000906                     
   434                           ;pruebilla.c: 133:     LATCbits.LC1 = 1;
   435   000906  828B               	bsf	139,1,c	;volatile
   436                           
   437                           ;pruebilla.c: 134:     LATCbits.LC1 = 0;
   438   000908  928B               	bcf	139,1,c	;volatile
   439   00090A  0012               	return		;funcret
   440   00090C                     __end_of_Send_Byte_Data:
   441                           	callstack 0
   442                           
   443                           	psect	rparam
   444   000000                     
   445                           	psect	config
   446                           
   447                           ;Config register CONFIG1L @ 0x300000
   448                           ;	PLL Prescaler Selection bits
   449                           ;	PLLDIV = 2, Divide by 2 (8 MHz oscillator input)
   450                           ;	System Clock Postscaler Selection bits
   451                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
   452                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
   453                           ;	USBDIV = 2, USB clock source comes from the 96 MHz PLL divided by 2
   454   300000                     	org	3145728
   455   300000  21                 	db	33
   456                           
   457                           ;Config register CONFIG1H @ 0x300001
   458                           ;	Oscillator Selection bits
   459                           ;	FOSC = HSPLL_HS, HS oscillator, PLL enabled (HSPLL)
   460                           ;	Fail-Safe Clock Monitor Enable bit
   461                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
   462                           ;	Internal/External Oscillator Switchover bit
   463                           ;	IESO = OFF, Oscillator Switchover mode disabled
   464   300001                     	org	3145729
   465   300001  0E                 	db	14
   466                           
   467                           ;Config register CONFIG2L @ 0x300002
   468                           ;	Power-up Timer Enable bit
   469                           ;	PWRT = OFF, PWRT disabled
   470                           ;	Brown-out Reset Enable bits
   471                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
   472                           ;	Brown-out Reset Voltage bits
   473                           ;	BORV = 3, Minimum setting 2.05V
   474                           ;	USB Voltage Regulator Enable bit
   475                           ;	VREGEN = OFF, USB voltage regulator disabled
   476   300002                     	org	3145730
   477   300002  19                 	db	25
   478                           
   479                           ;Config register CONFIG2H @ 0x300003
   480                           ;	Watchdog Timer Enable bit
   481                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
   482                           ;	Watchdog Timer Postscale Select bits
   483                           ;	WDTPS = 32768, 1:32768
   484   300003                     	org	3145731
   485   300003  1E                 	db	30
   486                           
   487                           ; Padding undefined space
   488   300004                     	org	3145732
   489   300004  FF                 	db	255
   490                           
   491                           ;Config register CONFIG3H @ 0x300005
   492                           ;	CCP2 MUX bit
   493                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
   494                           ;	PORTB A/D Enable bit
   495                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
   496                           ;	Low-Power Timer 1 Oscillator Enable bit
   497                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
   498                           ;	MCLR Pin Enable bit
   499                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
   500   300005                     	org	3145733
   501   300005  81                 	db	129
   502                           
   503                           ;Config register CONFIG4L @ 0x300006
   504                           ;	Stack Full/Underflow Reset Enable bit
   505                           ;	STVREN = ON, Stack full/underflow will cause Reset
   506                           ;	Single-Supply ICSP Enable bit
   507                           ;	LVP = OFF, Single-Supply ICSP disabled
   508                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
   509                           ;	ICPRT = OFF, ICPORT disabled
   510                           ;	Extended Instruction Set Enable bit
   511                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
   512                           ;	Background Debugger Enable bit
   513                           ;	DEBUG = 0x1, unprogrammed default
   514   300006                     	org	3145734
   515   300006  81                 	db	129
   516                           
   517                           ; Padding undefined space
   518   300007                     	org	3145735
   519   300007  FF                 	db	255
   520                           
   521                           ;Config register CONFIG5L @ 0x300008
   522                           ;	Code Protection bit
   523                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
   524                           ;	Code Protection bit
   525                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
   526                           ;	Code Protection bit
   527                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
   528                           ;	Code Protection bit
   529                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
   530   300008                     	org	3145736
   531   300008  0F                 	db	15
   532                           
   533                           ;Config register CONFIG5H @ 0x300009
   534                           ;	Boot Block Code Protection bit
   535                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
   536                           ;	Data EEPROM Code Protection bit
   537                           ;	CPD = OFF, Data EEPROM is not code-protected
   538   300009                     	org	3145737
   539   300009  C0                 	db	192
   540                           
   541                           ;Config register CONFIG6L @ 0x30000A
   542                           ;	Write Protection bit
   543                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
   544                           ;	Write Protection bit
   545                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
   546                           ;	Write Protection bit
   547                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
   548                           ;	Write Protection bit
   549                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
   550   30000A                     	org	3145738
   551   30000A  0F                 	db	15
   552                           
   553                           ;Config register CONFIG6H @ 0x30000B
   554                           ;	Configuration Register Write Protection bit
   555                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
   556                           ;	Boot Block Write Protection bit
   557                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
   558                           ;	Data EEPROM Write Protection bit
   559                           ;	WRTD = OFF, Data EEPROM is not write-protected
   560   30000B                     	org	3145739
   561   30000B  E0                 	db	224
   562                           
   563                           ;Config register CONFIG7L @ 0x30000C
   564                           ;	Table Read Protection bit
   565                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
   566                           ;	Table Read Protection bit
   567                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
   568                           ;	Table Read Protection bit
   569                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
   570                           ;	Table Read Protection bit
   571                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
   572   30000C                     	org	3145740
   573   30000C  0F                 	db	15
   574                           
   575                           ;Config register CONFIG7H @ 0x30000D
   576                           ;	Boot Block Table Read Protection bit
   577                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
   578   30000D                     	org	3145741
   579   30000D  40                 	db	64
   580                           tosu	equ	0xFFF
   581                           tosh	equ	0xFFE
   582                           tosl	equ	0xFFD
   583                           stkptr	equ	0xFFC
   584                           pclatu	equ	0xFFB
   585                           pclath	equ	0xFFA
   586                           pcl	equ	0xFF9
   587                           tblptru	equ	0xFF8
   588                           tblptrh	equ	0xFF7
   589                           tblptrl	equ	0xFF6
   590                           tablat	equ	0xFF5
   591                           prodh	equ	0xFF4
   592                           prodl	equ	0xFF3
   593                           indf0	equ	0xFEF
   594                           postinc0	equ	0xFEE
   595                           postdec0	equ	0xFED
   596                           preinc0	equ	0xFEC
   597                           plusw0	equ	0xFEB
   598                           fsr0h	equ	0xFEA
   599                           fsr0l	equ	0xFE9
   600                           wreg	equ	0xFE8
   601                           indf1	equ	0xFE7
   602                           postinc1	equ	0xFE6
   603                           postdec1	equ	0xFE5
   604                           preinc1	equ	0xFE4
   605                           plusw1	equ	0xFE3
   606                           fsr1h	equ	0xFE2
   607                           fsr1l	equ	0xFE1
   608                           bsr	equ	0xFE0
   609                           indf2	equ	0xFDF
   610                           postinc2	equ	0xFDE
   611                           postdec2	equ	0xFDD
   612                           preinc2	equ	0xFDC
   613                           plusw2	equ	0xFDB
   614                           fsr2h	equ	0xFDA
   615                           fsr2l	equ	0xFD9
   616                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    16
    Data        2
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     22      24
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_Send_Byte_Data

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                20    20      0     165
                                              2 COMRAM    20    20      0
                     _Send_Byte_Data
 ---------------------------------------------------------------------------------
 (1) _Send_Byte_Data                                       2     2      0      75
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Send_Byte_Data

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      27        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK0            A0      0       0       5        0.0%
BANK0               A0      0       0       6        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     16      18       1       25.3%
BITBIGSFRhhh        30      0       0      21        0.0%
BITBIGSFRhllh       2B      0       0      23        0.0%
BITBIGSFRlll        21      0       0      26        0.0%
BITBIGSFRhlh         B      0       0      22        0.0%
BITBIGSFRllh         8      0       0      25        0.0%
BITBIGSFRlh          6      0       0      24        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      18       3        0.0%
DATA                 0      0      18       4        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Thu Mar 21 17:32:31 2024

                     l60 0906                       l62 08EA                       l64 08EC  
                     l65 090A                       u10 08E4                       u11 08E0  
                     u20 0906                       u21 0902                       u80 081C  
                     u90 0830                      l821 084A                      l813 0812  
                    l831 085C                      l823 084E                      l815 083A  
                    l841 088E                      l833 086C                      l825 0852  
                    l817 083E                      l771 08F6                      l843 089A  
                    l835 0874                      l827 0856                      l819 0846  
                    l765 08D0                      l845 089E                      l837 087A  
                    l829 085A                      l767 08E4                      l759 08CC  
                    l847 08BA                      l839 088A                      l769 08F0  
                    u100 088A                      u101 0886                      u110 08BA  
                    u111 08B6                      u127 0862     main@contador_binario 0016  
                    wreg 0FE8              main@bicubic 000C                     _LATC 0F8B  
                   _LATD 0F8C                     _main 0812                     fsr2h 0FDA  
                   indf2 0FDF                     fsr2l 0FD9                     start 0000  
           ___param_bank 0000                    ?_main 0001                    _T1CON 0FCD  
                  _TMR1H 0FCF                    _TMR1L 0FCE                    _TRISC 0F94  
                  _TRISD 0F95                    tablat 0FF5                    status 0FD8  
        __initialization 090C             __end_of_main 08CA                   ??_main 0003  
          __activetblptr 0001         ??_Send_Byte_Data 0001                   isa$std 0001  
           __pdataCOMRAM 0017             __mediumconst 0000                   tblptrh 0FF7  
                 tblptrl 0FF6                   tblptru 0FF8          Send_Byte_Data@i 0002  
             __accesstop 0060  __end_of__initialization 0924            ___rparam_used 0001  
         __pcstackCOMRAM 0001               _acumulador 0017                  __Hparam 0000  
                __Lparam 0000             __psmallconst 0800                  __pcinit 090C  
                __ramtop 0800                  __ptext0 0812                  __ptext1 08CA  
              _T1CONbits 0FCD     end_of_initialization 0924        __end_ofmain@F3230 0809  
      __end_ofmain@F3228 0811                  postinc2 0FDE                _PORTBbits 0F81  
              _TRISBbits 0F93            __pidataCOMRAM 0932      start_initialization 090C  
            __smallconst 0800                 _LATBbits 0F8A                 _LATCbits 0F8B  
              main@F3230 0801                main@F3228 0809               _ADCON1bits 0FC1  
        main@peaton_stop 0004           _Send_Byte_Data 08CA                 __Hrparam 0000  
               __Lrparam 0000             __Lsmallconst 0800   __end_of_Send_Byte_Data 090C  
     Send_Byte_Data@b_m1 0001                 isa$xinst 0000          ?_Send_Byte_Data 0001  
           main@CONTADOR 0014  
